using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class CardEffectControl : MonoBehaviour
{
    public static CardEffectControl instance;
    public Image cardEffectNotice;

    public Image spellChainNotice;

    public bool EffectPermit;
    public int needSelected;
    public List<GameObject> effectChain = new();

    public bool isBoost = false;

    void Start()
    {
        instance = this;
    }

    public void CardIdCheck(GameObject card, bool activate)
    {
        switch (card.GetComponent<ScriptableCard>().id)
        {
            case 1:
                {
                    if (!activate && GameControl.instance.monsterOnField > 0 && GameControl.instance.MainPhase) {
                        GameControl.instance.EffectPhase();
                        effectChain.Add(card);
                        needSelected++;
                        GameControl.instance.selectForEffect = true;
                        CreateEffectNotice(card);
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 1)
                    {
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health += 1;
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack += 1;
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health.ToString();
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attackText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack.ToString();
                    }
                    break;
                }
            case 2:
                {
                    if (!activate && GameControl.instance.monsterOnField > 0 && GameControl.instance.MainPhase)
                    {
                        GameControl.instance.EffectPhase();
                        effectChain.Add(card);
                        needSelected++;
                        GameControl.instance.selectForEffect = true;
                        CreateEffectNotice(card);
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 1)
                    {
                        if (card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Enem" ||
                            card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Card")
                        {
                            if (card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().type == Type.dragon)
                            {
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health += 3;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack += 2;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health.ToString();
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attackText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack.ToString();
                            }
                            else
                            {
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health += 1;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack += 1;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health.ToString();
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attackText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack.ToString();
                            }
                        }
                        StartCoroutine(GameControl.instance.SendToGraveYard(card));
                    }
                    else if (activate)
                    {
                        card.GetComponent<ScriptableCard>().effectTarget.Clear();
                        StartCoroutine(GameControl.instance.SendToGraveYard(card));
                    }
                    break;
                }
            case 3:
                {
                    if (!activate && GameControl.instance.enemyMonsterOnField > 0 && GameControl.instance.MainPhase)
                    {
                        GameControl.instance.EffectPhase();
                        effectChain.Add(card);
                        needSelected++;
                        GameControl.instance.selectForEffect = true;
                        CreateEffectNotice(card);
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 1)
                    {
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack -= 1;
                        card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attackText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack.ToString();
                    }
                    break;
                }
            case 4:
                {
                    if (!activate && GameControl.instance.monsterOnField > 0 && GameControl.instance.enemyMonsterOnField > 0 && GameControl.instance.MainPhase)
                    {
                        GameControl.instance.EffectPhase();
                        effectChain.Add(card);
                        needSelected += 2;
                        GameControl.instance.selectForEffect = true;
                        CreateEffectNotice(card);
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 2)
                    {
                        if ((card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Enem" &&
                            card.GetComponent<ScriptableCard>().effectTarget[1].transform.parent.name[..4] == "Card") ||
                            (card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Card" &&
                            card.GetComponent<ScriptableCard>().effectTarget[1].transform.parent.name[..4] == "Enem"))
                        {
                            StartCoroutine(GameControl.instance.SendToGraveYard(card.GetComponent<ScriptableCard>().effectTarget[1]));
                            StartCoroutine(GameControl.instance.SendToGraveYard(card.GetComponent<ScriptableCard>().effectTarget[0]));
                        }
                        card.GetComponent<ScriptableCard>().effectTarget.Clear();
                        StartCoroutine(GameControl.instance.SendToGraveYard(card));
                    }
                    else if (activate)
                    {
                        card.GetComponent<ScriptableCard>().effectTarget.Clear();
                        StartCoroutine(GameControl.instance.SendToGraveYard(card));
                    }
                    break;
                }
            case 5:
                {
                    if (activate)
                    {
                        card.GetComponent<ScriptableCard>().isInvicible = 1;
                    }
                    break;
                }
            case 6:
                {
                    if (activate && transform.parent.name == "Graveyard")
                    {
                        InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().health += 2;
                        InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().attack += 2;
                        InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().healthText.text = InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().health.ToString();
                        InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().attackText.text = InfoPanelControl.instance.isSelected.GetComponent<ScriptableCard>().attack.ToString();
                    }
                    break;
                }
            case 7:
                {
                    if (activate && transform.parent.name == "Graveyard")
                    {
                        StartCoroutine(PlayerDeck.instance.DrawCard());
                    }
                    break;
                }
            case 8:
                {
                    if (!activate)
                    {
                        effectChain.Add(card);
                        GameControl.instance.EffectUpdate(effectChain);
                    }
                    else
                    {
                        PlayerDeck.instance.Shuffle();
                        StartCoroutine(PlayerDeck.instance.DrawCard());
                        EnemyDeck.instance.Shuffle();                        
                        StartCoroutine(EnemyDeck.instance.DrawCard());
                        Debug.Log("Draw");
                        StartCoroutine(GameControl.instance.SendToGraveYard(card));
                    }
                    break;
                }
        }
    }

    public void CardTypeCheck(GameObject card, bool activate)
    {
        switch (card.GetComponent<ScriptableCard>().type)
        {
            case Type.dragon:
                {
                    if (GameControl.instance.Attack)
                    {
                        card.GetComponent<ScriptableCard>().target.GetComponent<ScriptableCard>().isBurn = 3;
                    }
                    break;
                }
            case Type.angel:
                {
                    if (!activate && GameControl.instance.monsterOnField > 1)
                    {
                        if (GameControl.instance.MainPhase)
                        {
                            GameControl.instance.EffectPhase();
                            effectChain.Add(card);
                            GameControl.instance.selectForEffect = true;
                            needSelected += 1;
                            CreatePassiveNotice("Heal an ally 2");
                        }
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 1) 
                    {
                        if (card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Enem" ||
                                card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Card")
                        {
                            if (card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health + 2 > card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().originalHealth)
                            {
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().originalHealth;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health.ToString();
                            }
                            else
                            {
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health += 2;
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().health.ToString();
                            }
                            card.GetComponent<ScriptableCard>().effectTarget.Clear();
                        }
                    }
                    else card.GetComponent<ScriptableCard>().effectTarget.Clear();
                    break;
                }
            case Type.demon:
                {
                    if (GameControl.instance.Attack && GameControl.instance.canDirectAttack && card.GetComponent<ScriptableCard>().haveAttack)
                    {
                        if (card.GetComponent<ScriptableCard>().health + card.GetComponent<ScriptableCard>().attack > card.GetComponent<ScriptableCard>().originalHealth)
                        {
                            card.GetComponent<ScriptableCard>().health = card.GetComponent<ScriptableCard>().originalHealth;
                            card.GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().health.ToString();
                        }
                        else
                        {
                            card.GetComponent<ScriptableCard>().health += card.GetComponent<ScriptableCard>().attack;
                            card.GetComponent<ScriptableCard>().healthText.text = card.GetComponent<ScriptableCard>().health.ToString();
                        }
                    }
                    break;
                }
            case Type.witch:
                {
                    if (!activate && GameControl.instance.enemyMonsterOnField > 0)
                    {
                        if (GameControl.instance.MainPhase)
                        {
                            GameControl.instance.EffectPhase();
                            effectChain.Add(card);
                            GameControl.instance.selectForEffect = true;
                            CreatePassiveNotice("-2/0 to one unit");
                            needSelected += 1;
                        }
                    }
                    else if (card.GetComponent<ScriptableCard>().effectTarget.Count == 1)
                    {
                        if (card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Enem" ||
                                card.GetComponent<ScriptableCard>().effectTarget[0].transform.parent.name[..4] == "Card")
                        {
                            card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack -= 2;
                            if (card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack < 0)
                                card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack = 0;
                            card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attackText.text = card.GetComponent<ScriptableCard>().effectTarget[0].GetComponent<ScriptableCard>().attack.ToString();
                        }
                        card.GetComponent<ScriptableCard>().effectTarget.Clear();
                    }
                    else card.GetComponent<ScriptableCard>().effectTarget.Clear();
                    break;
                }
            case Type.golem:
                {
                    if (GameControl.instance.MainPhase)
                    {
                        card.GetComponent<ScriptableCard>().isShielded = true;
                    }
                    break;
                }
        }
    }

    void CreateEffectNotice(GameObject card)
    {
        Image temp = Instantiate(cardEffectNotice, GameObject.Find("Canvas").transform);
        temp.GetComponent<RectTransform>().anchoredPosition = new Vector3(804, 30);
        temp.transform.GetChild(0).GetComponent<Text>().text = card.GetComponent<ScriptableCard>().description;
    }

    void CreatePassiveNotice(string passiveEffect)
    {
        Image temp = Instantiate(cardEffectNotice, GameObject.Find("Canvas").transform);
        temp.GetComponent<RectTransform>().anchoredPosition = new Vector3(804, 30);
        temp.transform.GetChild(0).GetComponent<Text>().text = passiveEffect;
    }
}
