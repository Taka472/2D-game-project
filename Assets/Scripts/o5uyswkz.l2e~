using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class ScriptableCard : MonoBehaviour, IPointerClickHandler, IPointerUpHandler
{
    public Card cards;
    public Sprite dragon;
    public Sprite golem;
    public Sprite demon;
    public Sprite angel;
    public Sprite witch;
    public Sprite spell;
    public Image healthSprite;
    public Image attackSprite;
    public Image back;
    public Image glowEffect;

    public int id;
    public string cardName;
    public string description;
    public Type type;
    public int cost;
    public int attack;
    public int health;
    public int originalHealth;
    public int originalAttack;

    public Image DisplayImage;
    public Image typeImage;
    public Text nameText;
    public Text descriptionText;
    public Text costText;
    public Text attackText;
    public Text healthText;

    public static ScriptableCard instance;

    public GameObject Hand;

    public bool canBeSummon;
    public static bool summoned = false;
    public static bool isYourTurn;

    public GameObject cardBack;
    public Image InfoNotice;

    public bool haveAttack;

    public bool isSelectedForTribute;
    public bool isSelectedForDiscard;

    public int isBurn;
    public int isInvicible;
    public bool isSelectedForEffect;
    public bool isShielded;
    public bool isBoosted;
    public GameObject target;

    public List<GameObject> effectTarget;
    public GameObject slashEffect;
    public GameObject explodeEffect;
    // Start is called before the first frame update
    void Start()
    {
        canBeSummon = false;
        instance = this;
        isSelectedForTribute = false;
        isBoosted = false;
    }

    // Update is called once per frame
    void Update()
    {
        DrawCard();
        CardDisplay();
        CheckSummon();
        GlowControl();
        AttackPhase();
        if (health <= 0 && type != Type.spell)
        {
            GameControl.instance.SendToGraveYard(gameObject);
            health = originalHealth;
            if (healthText != null)
                healthText.text = originalHealth.ToString();
            attack = originalAttack;
            if (attackText != null)
                attackText.text = originalAttack.ToString();
            glowEffect.gameObject.SetActive(false);
        }
    }
    void CardDisplay()
    {
        if (cards != null)
        {
            StartCoroutine(TypeCheck());
            DisplayImage.sprite = cards.Image;
            id = cards.id;
            cardName = cards.cardName;
            description = cards.description;
            type = cards.type;
            cost = cards.cost;
            attack = cards.attack;
            health = cards.health;
            originalHealth = cards.health;
            originalAttack = cards.attack;
            nameText.text = "" + cardName;
            descriptionText.text = "" + description;
            if (type != Type.spell)
            {
                costText.text = "" + cost;
                attackText.text = "" + attack;
                healthText.text = "" + health;
            }
            cards = null;
        }
    }

    IEnumerator TypeCheck()
    {
        yield return null;
        switch (type)
        {
            case Type.spell:
                {
                    typeImage.sprite = spell;
                    break;
                }
            case Type.dragon:
                {
                    typeImage.sprite = dragon;
                    break;
                }
            case Type.golem:
                {
                    typeImage.sprite = golem;
                    break;
                }
            case Type.demon:
                {
                    typeImage.sprite = demon;
                    break;
                }
            case Type.angel:
                {
                    typeImage.sprite = angel;
                    break;
                }
            case Type.witch:
                {
                    typeImage.sprite = witch;
                    break;
                }
        }
    }

    void DrawCard()
    {
        if (transform.name[..5] != "Enemy")
            Hand = GameObject.Find("Hand");
        else Hand = GameObject.Find("EnemyHand");
        if (CompareTag("Card"))
        {
            if (Hand.name == "Hand")
            {
                cards = PlayerDeck.instance.deck[PlayerDeck.instance.numsOfCard - 1];
                PlayerDeck.instance.numsOfCard--;
            } else
            {
                cards = EnemyDeck.instance.deck[EnemyDeck.instance.numsOfCard - 1];
                EnemyDeck.instance.numsOfCard--;
            }
            tag = "Untagged";
        }
    }

    void CheckSummon()
    {
        if (!summoned)
        {
            if (cost <= 4) canBeSummon = true;
            else if (cost <= 6 && GameControl.instance.monsterOnField >= 1) canBeSummon = true;
            else if (GameControl.instance.monsterOnField > 1) canBeSummon = true;
            else canBeSummon = false;
        }
        else canBeSummon = false;
    }

    void GlowControl()
    {
        if (isYourTurn && glowEffect != null && GameControl.instance.MainPhase)
        {
            if (GameControl.instance.OutOfNumber && transform.parent.name == "Hand")
            {
                glowEffect.gameObject.SetActive(true);
            }
            else if (type == Type.spell)
            {
                if (transform.parent.name == "Hand")
                    glowEffect.gameObject.SetActive(true);
                else if (transform.parent.name[..4] == "Spel")
                    glowEffect.gameObject.SetActive(false);
            }
            else if (!summoned)
            {
                if ((canBeSummon && transform.parent.name[..4] == "Hand") || (transform.parent.name[..4] == "Card" && isSelectedForTribute))
                {
                    glowEffect.gameObject.SetActive(true);
                }
                else
                    glowEffect.gameObject.SetActive(false);
            }
            else if (isSelectedForEffect)
                glowEffect.gameObject.SetActive(true);
            else glowEffect.gameObject.SetActive(false);
        }
        else if (glowEffect != null) 
            glowEffect.gameObject.SetActive(false);
    }

    public void OnPointerClick(PointerEventData eventData)
    {
        if (!GameControl.instance.TributeSummon && !GameControl.instance.selectForEffect)
        {
            CheckExist();
            if (cardBack.activeSelf && transform.parent.name[..4] != "Spel") return;
            Image temp = Instantiate(InfoNotice);
            InfoPanelControl.instance.summonButton.gameObject.SetActive(false);
            InfoPanelControl.instance.activateSpell.gameObject.SetActive(false);
            InfoPanelControl.instance.setSpell.gameObject.SetActive(false);
            InfoPanelControl.instance.activateSet.gameObject.SetActive(false);
            InfoPanelControl.instance.discard.gameObject.SetActive(false);
            temp.transform.SetParent(GameObject.Find("Canvas").transform);
            temp.GetComponent<RectTransform>().localScale = Vector3.one;
            temp.GetComponent<RectTransform>().anchoredPosition = Vector3.zero;
            InfoPanelControl.instance.isSelected = gameObject;
            InfoPanelControl.instance.descriptionData = description;
            InfoPanelControl.instance.typeData = type.ToString();
            InfoPanelControl.instance.typeImageData = typeImage;
            InfoPanelControl.instance.nameData = cardName;
            if (type != Type.spell)
                InfoPanelControl.instance.statusData = "| Atk: " + attack + " | Hp: " + health + " | Cost: " + cost;
            else
                InfoPanelControl.instance.statusData = "";
            if (transform.parent.name == "Hand" && isYourTurn)
            {
                if (GameControl.instance.OutOfNumber)
                {
                    InfoPanelControl.instance.discard.gameObject.SetActive(true);
                }
                else if (type != Type.spell)
                {
                    if (canBeSummon)                   
                        InfoPanelControl.instance.summonButton.gameObject.SetActive(true);                    
                }
                else
                {
                    InfoPanelControl.instance.activateSpell.gameObject.SetActive(true);
                    InfoPanelControl.instance.setSpell.gameObject.SetActive(true);
                }
            }
            else if (GameControl.instance.spellChainSelect)
            {
                if (type == Type.spell && transform.parent.name[..4] == "Spel")
                    InfoPanelControl.instance.activateSet.gameObject.SetActive(true);
            }
            else if (transform.parent.name[..4] == "Spel" && cardBack.activeSelf && isYourTurn)
            {
                InfoPanelControl.instance.activateSet.gameObject.SetActive(true);
            }
        }
        else if (GameControl.instance.selectForEffect)
        { 
            if (type != Type.spell && !cardBack.activeSelf && transform.parent.name != "Hand")
            {
                if (!isSelectedForEffect)
                {
                    glowEffect.gameObject.SetActive(true);
                    isSelectedForEffect = true;
                    CardEffectControl.instance.effectChain[CardEffectControl.instance.effectChain.Count - 1].GetComponent<ScriptableCard>().effectTarget.Add(eventData.pointerClick);
                    EffectNotice.instance.numOfChosen++;
                }
                else
                {
                    glowEffect.gameObject.SetActive(false);
                    isSelectedForEffect = false;
                    CardEffectControl.instance.effectChain[CardEffectControl.instance.effectChain.Count - 1].GetComponent<ScriptableCard>().effectTarget.Remove(eventData.pointerClick);
                    EffectNotice.instance.numOfChosen--;
                }
            }
        }
        else if (transform.parent.name[..4] == "Card")
        {
            if (!isSelectedForTribute)
            {
                isSelectedForTribute = true;
            }
            else isSelectedForTribute = false;
        }
    }

    void CheckExist()
    {
        GameObject canvas = GameObject.Find("Canvas");
        if (canvas != null)
        {
            for (int i = 0; i < canvas.transform.childCount; i++)
            {
                if (canvas.transform.GetChild(i).name == "CardInfoView(Clone)")
                {
                    Destroy(canvas.transform.GetChild(i).gameObject);
                    break;
                }
            }
        }
    }

    void AttackPhase()
    {
        if (GameControl.instance.Attack && isYourTurn)
        {
            if (!haveAttack && transform.parent.name[..4] == "Card")
            {
                haveAttack = false;
                if (glowEffect != null)
                    glowEffect.gameObject.SetActive(true);
            }
        }
    }

    public void OnPointerUp(PointerEventData eventData)
    {
        if (haveAttack) return;
        if (GameControl.instance.Attack && isYourTurn)
        {
            if (transform.parent.name[..4] == "Card")
            {
                if ((eventData.pointerEnter.transform.parent.parent != null ||
                    eventData.pointerEnter.transform.parent.parent != null) &&
                   (eventData.pointerEnter.transform.parent.parent.name == "EnemyHand" ||
                    eventData.pointerEnter.transform.name == "EnemyHand") &&
                    GameControl.instance.canDirectAttack)
                {
                    GameControl.instance.enemyHealth -= attack;
                    StartCoroutine(GameControl.instance.CameraShake(.5f, .3f));
                    haveAttack = true;
                    if (glowEffect != null)
                        glowEffect.gameObject.SetActive(false);
                }
                else if (eventData.pointerEnter.transform.parent.name.Length > 14 && 
                        !GameControl.instance.canDirectAttack)
                {
                    if (eventData.pointerEnter.transform.parent.name[..16] == "EnemyMonsterCard")
                    {
                        target = eventData.pointerEnter;
                        eventData.pointerEnter.transform.parent.GetComponent<ScriptableCard>().target = gameObject;
                        HealthUpdate();                
                    }
                }
            }
        }
    }

    public async void HealthUpdate()
    {
        await SlashEffect();
        if (target.transform.parent.GetComponent<ScriptableCard>().isShielded)
            target.transform.parent.GetComponent<ScriptableCard>().health -= attack + 1;
        else if (target.transform.parent.GetComponent<ScriptableCard>().isInvicible == 0)
            target.transform.parent.GetComponent<ScriptableCard>().health -= attack;
        if (isShielded)
            health -= target.transform.parent.GetComponent<ScriptableCard>().attack + 1;
        else if (isInvicible == 0)
            health -= target.transform.parent.GetComponent<ScriptableCard>().attack;
        healthText.text = health.ToString();
        target.transform.parent.GetComponent<ScriptableCard>().healthText.text = ""
            + target.transform.parent.GetComponent<ScriptableCard>().health;
        haveAttack = true;
        target.transfomr.parent.GetComponent<ScriptableCard>().target = gameObject;
        CardEffectControl.instance.CardIdCheck(gameObject, true);
        CardEffectControl.instance.CardTypeCheck(gameObject, true);
        CardEffectControl.instance.CardIdCheck(target.transform.parent.gameObject, true);
        CardEffectControl.instance.CardTypeCheck(target.transform.parent.gameObject, true);
        await Task.Yield();
    }

    public async void EnemyHealthUpdate()
    {
        await EnemySlashEffect();
        if (target.GetComponent<ScriptableCard>().isShielded)
            target.GetComponent<ScriptableCard>().health -= attack + 1;
        else if (target.GetComponent<ScriptableCard>().isInvicible == 0)
            target.GetComponent<ScriptableCard>().health -= attack;
        if (isShielded)
            health -= target.GetComponent<ScriptableCard>().attack + 1;
        else if (isInvicible == 0)
            health -= target.GetComponent<ScriptableCard>().attack;
        target.GetComponent<ScriptableCard>().healthText.text = target.GetComponent<ScriptableCard>().health.ToString();
        healthText.text = health.ToString();
        CardEffectControl.instance.CardIdCheck(gameObject, true);
        CardEffectControl.instance.CardTypeCheck(gameObject, true);
        CardEffectControl.instance.CardIdCheck(target, true);
        CardEffectControl.instance.CardTypeCheck(target, true);
        await Task.Yield();
    }

    public async Task SlashEffect()
    {
        GameObject temp1 = Instantiate(slashEffect);
        GameObject temp2 = Instantiate(slashEffect);
        temp1.transform.position = gameObject.transform.position;
        temp2.transform.position = target.transform.position;
        temp2.transform.eulerAngles = new Vector3(0, 0, 180);
        StartCoroutine(target.transform.parent.GetComponent<ScriptableCard>().Shake(1f, .1f));
        StartCoroutine(Shake(1f, .1f));
        await Task.Delay(1200);
        Destroy(temp1);
        Destroy(temp2);
    }

    public async Task EnemySlashEffect()
    {
        GameObject temp1 = Instantiate(slashEffect);
        GameObject temp2 = Instantiate(slashEffect);
        temp1.transform.eulerAngles = new Vector3(0, 0, 180);
        temp1.transform.position = gameObject.transform.position;
        temp2.transform.position = target.transform.position;
        StartCoroutine(target.GetComponent<ScriptableCard>().Shake(1f, .1f));
        StartCoroutine(Shake(1f, .1f));
        await Task.Delay(1200);
        Destroy(temp1);
        Destroy(temp2);
    }

    public IEnumerator Shake(float duration, float magnitude)
    {
        Vector3 startPosition = transform.position;
        float elapseTime = 0;
        while (elapseTime < duration)
        {
            elapseTime += Time.deltaTime;
            float x = Random.Range(-1, 1);
            float y = Random.Range(-1, 1);
            transform.position = startPosition + new Vector3(x, y, 0) * magnitude;
            yield return null;
        }
        transform.position = startPosition;
    }
}
